(define *test-results* '())
(define (reset-tests!) (set! *test-results* '()))
(define abort-test-on-error? #t)

(define (mkstr . args)
  (with-output-to-string '()
    (lambda () (for-each display args))))

(define (fold f start lst)
  (if (pair? lst)
      (fold f (f (car lst) start) (cdr lst))
      start))

(define (show-test-result r)
  (let ((result (if (eq? (car r) #t)
                    "OK"
                    (mkstr "ERROR: " (car r))))
        (expr (cdr r)))
    (display (mkstr (car expr) " => " (cdr expr)  " : " result))
    (newline)))

(define (add-test-result! test result)
  (let ((obj (cons result test)))
    (show-test-result obj)
    (set! *test-results* (cons obj *test-results*))
    (eq? result #t)))

(define (run-test fn expr expected)
  (define (strerr e)
    (with-output-to-string '() (lambda () (display-exception e))))
  (with-exception-catcher
    (lambda (e) (add-test-result! (cons expr expected) (strerr e)))
    (lambda ()
      (let* ((ret (fn expr))
             (result (if (equal? ret expected)
                         #t
                         (mkstr "ERROR: " ret " != " expected))))
        (add-test-result! (cons expr ret) result)))))

(define (run-test-exprs fn defs)
  (let loop ((defs defs))
    (cond ((not (pair? defs)))
          ((run-test fn (car defs) (caddr defs)) (loop (cdddr defs)))
          ((not abort-test-on-error?) (loop (cdddr defs))))))

(define (show-test-results results)
  (newline)
  (display "TEST RESULTS")
  (newline)
  (display "============")
  (newline)
  (let loop ((results (reverse results))
             (nok 0)
             (nerrors 0))
    (cond ((pair? results)
           (show-test-result (car results))
           (if (eq? (caar results) #t)
               (loop (cdr results) (+ nok 1) nerrors)
               (loop (cdr results) nok (+ nerrors 1))))
          (#t
           (newline)
           (display (mkstr "Summary: " (+ nok nerrors) " tests total"))
           (newline)
           (display (mkstr "         " nok " successful"))
           (newline)
           (display (mkstr "         " nerrors " errors"))
           (newline)))))

(define (test fn defs)
  (reset-tests!)
  (run-test-exprs fn defs)
  (show-test-results *test-results*))
