#!/bin/sh
#\
exec jimsh "$0" "$@"

array set defs {
  load-reg-> {To From}
  load-lambda-> {To Fn}
  load-const-> {To Const}
  arg-reg-> {To From}
  arg-lambda-> {To Fn}
  arg-const-> {To Const}
  tail-arg-reg-> {To From}
  tail-arg-lambda-> {To Fn}
  tail-arg-const-> {To Const}
  jump {+Off}
  closure-lambda-> {Lambda Nargs}
  closure-reg-> {Reg Nargs}
  closure-fn-> {Fn Nargs}
  closure-tail-lambda-> {Lambda Nargs}
  closure-tail-reg-> {Reg Nargs}
  closure-tail-fn-> {Fn Nargs}
  drop-ret {}
  load-ret-> Reg
  call {}
  tail-call {}
  jump-unless {Reg +Off}
  ret-reg Reg
  ret-lambda Fn
  ret-const Const
  push-error-handler Reg
  pop-error-handler {}
}

set stat_keys {min max 0 1 2 3 <4 <8 <64 <128 <256 >=256}

foreach key $stat_keys {set stat_keys_index($key) -}

proc % {x n} {format %4.2f%% [expr {100.0 * $x / $n}]}

proc sorted_defs {var} {
  upvar 1 $var stat
  global defs
  set list {}
  foreach op [array names defs] {
    lappend list [list $op $stat($op/n)]
  }
  set ret {}
  foreach op [lsort -index 1 -decreasing -integer $list] {
    lappend ret [lindex $op 0]
  }
  return $ret
}

proc show_stat_item {var obj} {
  global stat_keys stat_keys_index
  upvar 1 $var stat
  set name [lindex [split $obj /] end]
  puts "  $name:"
  set avg 0
  if {[info exists stat($obj/sum)] && $stat($obj/n) > 0} {
    set avg [expr {1.0 * $stat($obj/sum) / $stat($obj/n)}]
  }
  puts [format "    %5s: %8.2f" avg $avg]
  set keys {}
  foreach key [array names stat $obj/*] {
    set key [lindex [split $key /] end]
    if {$key ne "sum" && ![info exists stat_keys_index($key)]} {
      lappend keys $key
    }
  }
  foreach key [concat $stat_keys $keys] {
    if {[info exists stat($obj/$key)] && $key ni {sum n}} {
      set pc [expr {100.0 * $stat($obj/$key) / $stat($obj/n)}]
      puts [format "    %5s: %5d %8.2f%%"  $key $stat($obj/$key) $pc]
    }
  }
}

proc val {var key} {
  upvar 1 $var x
  set ret {}
  catch {set ret $x($key)}
  return $ret
}

proc show_stat {var} {
  global defs
  upvar 1 $var stat
  puts "global"
  puts "  nfuncs: $stat(%func/n)"
  puts "  nclosures: $stat(%closure/n)"
  puts "  ntoplevels: $stat(%toplevel/n)"
  puts "  const_size_sys: [val stat %const_size_sys]"
  puts "  const_size_sys1: [val stat %const_size_sys1]"
  puts "  const_size_sys2: [val stat %const_size_sys2]"
  puts "  const_size_sys3: [val stat %const_size_sys3]"
  puts "  const_size_sys4: [val stat %const_size_sys4]"
  puts "  const_size_module: [val stat %const_size_module]"
  puts "  const_size_func: [val stat %const_size_func]"
  puts "  call_size: [val stat %call_size]"
  puts "  call_size_2: [val stat %call_size_2]"
  puts "  call_size_3: [val stat %call_size_3]"
  puts "  call_size_4: [val stat %call_size_4]"
  puts "  call_size_5: [val stat %call_size_5]"
  puts "  to+1: [val stat %to+1]"
  show_stat_item stat nconst
  show_stat_item stat const
  show_stat_item stat args
  show_stat_item stat nargs
  puts ""
  foreach op [sorted_defs stat] {
    set args $defs($op)
    puts "$op [join $args " "]"
    puts "  n: $stat($op/n) [% $stat($op/n) $stat(n)]"
    set keys {}
    foreach key [array names stat $op/*] {
      set key [lindex [split $key /] 1]
      if {$key ni $args && $key ni {n}} {
        lappend keys $key
      }
    }
    foreach key $keys {
      puts "  $key: $stat($op/$key) [% $stat($op/$key) $stat($op/n)]"
    }
    foreach arg $args {
      show_stat_item stat $op/$arg
    }
    puts ""
  }
}

proc count_item {var key val} {
  upvar 1 $var stat
  incr stat($key/n)
  incr stat($key/sum) $val
  if {![info exists stat($key/max)] || $stat($key/max) < $val} {
    set stat($key/max) $val
  }
  if {![info exists stat($key/min)] || $stat($key/min) > $val} {
    set stat($key/min) $val
  }
  switch -- $val {
    0 - 1 - 2 - 3 {incr stat($key/=$val)}
  } 
  if {$val < 4} {
    incr stat($key/<4)
  } elseif {$val < 8} {
    incr stat($key/<8)
  } elseif {$val < 64} {
    incr stat($key/<64)
  } elseif {$val < 128} {
    incr stat($key/<128)
  } elseif {$val < 256} {
    incr stat($key/<256)
  } else {
    incr stat($key/>=256)
  }
}

proc init_stat {var} {
  global defs
  upvar 1 $var stat
  foreach op [array names defs] {
    set stat($op/n) 0
    foreach arg $defs($op) {
      set stat($op/$arg/n) 0
      set stat($op/$arg/sum) 0
    }
  }
  foreach x {%func %toplevel %closure} {
    set stat($x/n) 0
  }
}

proc parse {var fd} {
  upvar 1 $var stat
  global defs const_table
  array set ctx {
    nconst 0
    func {}
    nargs 0
  }
  array unset stat @mod/*
  array unset stat @func/*
  while {[gets $fd line] >= 0} {
    set line [regsub {;.*$} $line {}]
    set args [lassign $line op]
    if {$op eq {}} continue
    switch -- $op {
      const {incr ctx(nconst)}
      klvm.s1.toplevel - klvm.s1.func - klvm.s1.closure {
        if {$ctx(func) ne {}} {
          incr stat(nconst/n)
          count_item stat nconst $ctx(nconst)
        }
        lassign $line op ctx(func) x ctx(frame_size) ctx(arity)
        set ctx(type) [lindex [split $op .] end]
        set ctx(nconst) 0
        incr stat(%$ctx(type)/n)
      }
      default {
        incr stat(n)
        incr stat($op/n)
        foreach arg $defs($op) val $args {
          if {$arg eq {}} break
          count_item stat $op/$arg $val
        }
        switch -- $op {
          closure-lambda-> - closure-reg-> - closure-fn-> -
          closure-tail-lambda-> - closure-tail-reg-> - closure-tail-fn-> {
            set ctx(prev_to) $ctx(frame_size)
            set ctx(prev_type) {}
            set ctx(prev_from) {}
            set ctx(nargs) [lindex $args 1]
            set ctx(tail) [string match {*tail*} $op]
            count_item stat nargs $ctx(nargs)
          }
          load-reg-> {
            lassign $args to from
            if {$to > $from} {
              incr stat($op/to>from)
            }
          }
        }
      }
    }
    process_funcall $op $args ctx stat
    process_constsize $op $args ctx stat
    process_constsize1 $op $args ctx stat

    set call_args_ops {arg-reg-> arg-const-> arg-lambda-> tail-arg-reg->
                       tail-arg-const-> tail-arg-lambda->}

    if {$op in $call_args_ops} {
      process_callsize $op $args ctx stat
      process_callsize2 $op $args ctx stat
      process_callsize3 $op $args ctx stat
      process_callsize4 $op $args ctx stat
      process_callsize5 $op $args ctx stat
    }
    switch -- $op {
      call - tail-call {set ctx(call_args) 0}
      load-reg-> - load-lambda-> - load-const-> {
        lassign $args ctx(prev_to) ctx(prev_from)
        set ctx(prev_type) $op
      }
    }
  }
  #parray stat
}

proc process_const {op arg var statvar} {
}

proc process_call_args {op arg var statvar} {
  upvar 1 $var ctx
  upvar 1 $statvar stat
  lassign $arg to from
  incr stat(args/sum)
  incr stat(args/n)
  if {$ctx(prev_to) eq {}} {
    if {$to == $ctx(frame_size)} {
      incr stat(args/to=fs)
    }
    incr stat(args/to+1)
  } else {
    if {$to - 1 == $ctx(prev_to)} {
      incr stat(args/to+1)
    }
    if {$to + 1 == $ctx(prev_to)} {
      incr stat(args/to-1)
    }
  }
}

proc process_funcall {op arg var statvar} {
  upvar 1 $var ctx
  upvar 1 $statvar stat
  switch -- $op {
    arg-reg-> - arg-const-> - arg-lambda-> -
    tail-arg-reg-> - tail-arg-const-> - tail-arg-lambda-> {
      process_call_args $op $arg ctx stat
    }
    call - tail-call {
      switch -- $ctx(nargs) {
        0 - 1 {incr stat(args/$ctx(nargs))}
      }
    }
  }
}

proc int_size {val} {
  if {$val < -(2 ** 32)} {
    return 8
  } elseif {$val < -65536} {
    return 4
  } elseif {$val < -256} {
    return 2
  } elseif {$val < 0} {
    return 1
  } elseif {$val < 256} {
    return 1
  } elseif {$val < 65536} {
    return 2
  } elseif {$val < 2 ** 32} {
    return 4
  } else {
    return 8
  }
}

proc coded_int_size {val} {
  if {$val >= 0 && $val < 128} {
    return 1
  }
  expr {[int_size $val] + 1}
}

proc const_size {type val} {
  switch -- $type {
    num {
      set s [int_size $val]
      switch -- $s {
        1 {return 1}
        default {expr {$s + 1}}
      }
    }
    bool - nil {return 1}
    lambda - func - sym - str {expr {1 + 4 + [string length $val]}}
  }
}

proc const_size1 {type val} {
  switch -- $type {
    num {
      if {$val >= 0 && $val < 128} {
        return 1
      }
      if {$val < -(2 ** 32)} {
        return 8
      } elseif {$val * 2 < -65536} {
        return 4
      } elseif {$val * 2 < -256} {
        return 2
      } elseif {$val * 2 < 0} {
        return 1
      } elseif {$val * 2 < 256} {
        return 1
      } elseif {$val * 2 < 65536} {
        return 2
      } elseif {$val * 2 < 2 ** 32} {
        return 4
      } else {
        return 8
      }
    }
    bool - nil {return 1}
    lambda - func - sym - str {
      return [expr {4 + [string length $val]}]
    }
  }
}

proc process_constsize {op arg var statvar} {
  if {$op ne "const"} return
  upvar 1 $var ctx
  upvar 1 $statvar stat
  #puts stderr [list const: $arg]
  lassign $arg type val
  set size [const_size $type $val]
  if {[info exists stat(@sys/$type/$val)]} {
    incr stat(%const_size_sys) 4
  } else {
    incr stat(%const_size_sys) $size
    set stat(@sys/$type/$val) -
  }
  if {[info exists stat(@mod/$type/$val)]} {
    incr stat(%const_size_module) 4
  } else {
    incr stat(%const_size_module) $size
    set stat(@mod/$type/$val) -
  }
  incr stat(%const_size_func) $size
  incr stat(const/n)
  incr stat(const/$type)
}

proc process_constsize1 {op arg var statvar} {
  if {$op ne "const"} return
  global const
  upvar 1 $statvar stat
  lassign $arg type val
  if {![info exists const($type/$val)]} {
    set const($type/$val) [array size const]
    incr stat(%const_size_sys1) [const_size $type $val]
    incr stat(%const_size_sys2) [const_size $type $val]
    incr stat(%const_size_sys3) [const_size $type $val]
    incr stat(%const_size_sys4) [const_size1 $type $val]
  }
  set idx $const($type/$val)
  if {$idx < 64} {
    set d 1
  } elseif {$idx < 256} {
    set d 2
  } elseif {$idx < 65536} {
    set d 3
  } elseif {$val < 2 ** 32} {
    set d 4
  }
  incr stat(%const_size_sys1) $d
  incr stat(%const_size_sys2) 4
  incr stat(%const_size_sys3) 2
  incr stat(%const_size_sys4) $d
}

proc process_callsize {op arg var statvar} {
  upvar 1 $var ctx
  upvar 1 $statvar stat
  lassign $arg to from
  set to_size [int_size $to]
  set from_size [int_size $from]
  incr stat(%call_size) 1
  incr stat(%call_size) [coded_int_size $to]
  incr stat(%call_size) [coded_int_size $from]
}

proc process_callsize2 {op arg var statvar} {
  upvar 1 $var ctx
  upvar 1 $statvar stat
  lassign $arg to from
  if {$op in {load-const-> load-lambda->}} {
    incr stat(%call_size_2) 1
  }
  if {$to != $ctx(prev_to) + 1} {
    incr stat(%call_size_2) 1
    incr stat(%call_size_2) [coded_int_size $to]
  } else {
    incr stat(%to+1)
  }
  incr stat(%call_size_2) [coded_int_size $from]
  set ctx(prev_type) $op
}

proc process_callsize3 {op arg var statvar} {
  upvar 1 $var ctx
  upvar 1 $statvar stat
  lassign $arg to from
  if {$op in {load-const-> load-lambda->}} {
    incr stat(%call_size_3) 1
  }
  incr stat(%call_size_3) [coded_int_size $from]
  incr stat(%call_size_3) [coded_int_size $to]
}

proc process_callsize4 {op arg var statvar} {
  upvar 1 $var ctx
  upvar 1 $statvar stat
  lassign $arg to from
  if {$op in {load-const-> load-lambda->}} {
    incr stat(%call_size_4) 1
  }
  if {$ctx(tail)} {
    incr stat(%call_size_4) [coded_int_size $from]
    incr stat(%call_size_4) [coded_int_size $to]
  } else {
    incr stat(%call_size_4) [coded_int_size $from]
  }
}

proc arg_size5 {op x} {
  if {$op in {load-const-> load-lambda->}} {
    if {$x < 64} {
      return 1
    } elseif {$x < 256} {
      return 2
    } else {
      return [expr {1 + [int_size $x]}]
    }
  } else {
    return [coded_int_size $x]
  }
}

proc process_callsize5 {op arg var statvar} {
  upvar 1 $var ctx
  upvar 1 $statvar stat
  lassign $arg to from
  if {$op in {load-const-> load-lambda->}} {
    if {$from < 64} {
    } elseif {$from < 128 } {
      incr stat(%call_size_5) 1
    }
  }
  if {$ctx(tail)} {
    incr stat(%call_size_5) [arg_size5 $op $from]
    incr stat(%call_size_5) [coded_int_size $to]
  } else {
    incr stat(%call_size_5) [arg_size5 $op $from]
  }
}

proc main {} {
  global argv
  init_stat stat
  if {$argv eq {}} {
    parse stat stdin
  } else {
    foreach file $argv {
      set fd [open $file]
      parse stat $fd
      close $fd
    }
  }
  show_stat stat
}

if {!$tcl_interactive} {
  main
}
