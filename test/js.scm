(define (js-str-from-obj x)
  (define (js-str x)
    (let* ((x (mkstr x))
           (q (string #\"))
           (len (string-length x)))
      (let loop ((i 0)
                 (s ""))
        (if (< i len)
            (loop (+ i 1)
                  (string-append
                   s
                   (let ((c (string-ref x i)))
                     (case c
                       ((#\") (string #\\ #\"))
                       (else (string c))))))
            (string-append q s q)))))
  (cond ((equal? x #t) "true")
        ((equal? x #f) "false")
        ((equal? x '()) "[]")
        ((string? x) (js-str x))
        ((symbol? x) (mkstr "Shen.intern(" (js-str (symbol->string x)) ")"))
        ((pair? x)
         (let ((x (map js-str-from-obj x)))
           (mkstr "Shen.list([" (strjoin x ", ") "])")))
        ((vector? x)
         (let ((x (map js-str-from-obj (vector->list x))))
           (mkstr "[" (strjoin x ", ") "]")))
        (#t (mkstr x))))

(define (js-from-test-defs defs var)
  (let loop ((defs defs)
             (acc '()))
    (if (and (pair? defs) (pair? (cdr defs)) (pair? (cddr defs)))
        (let* ((call (car defs))
               (expected (caddr defs))
               (s (strjoin (cons (js-str-from-obj (mkstr (car call)))
                                 (map js-str-from-obj (cdr call)))
                           ", ")))
          (loop (cdddr defs)
                (cons (mkstr "[[" s "], " (js-str-from-obj expected) "]")
                      acc)))
        (mkstr var "  " (strjoin (reverse acc) (mkstr "," #\newline "  "))
                   #\newline "]" #\newline))))

(define (js-save)
  (with-output-to-file
    "~/dev/shen/shen-js/tests/test_def.js"
    (lambda ()
      (display (mkstr "Test.t1 = [" #\newline
                      (js-from-test-defs t1.defs ""))))))
